{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNativeCalendars = require(\"react-native-calendars\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _jsxFileName = \"D:\\\\merge\\\\please-attendence\\\\src\\\\components\\\\calendar\\\\CalendarView.js\";\n\nfunction CalendarView() {\n  var _this = this;\n\n  var markedDate = {\n    '2017-12-03': {\n      selected: true\n    }\n  };\n  return _react.default.createElement(_reactNativeCalendars.Agenda, {\n    markedDates: markedDate,\n    items: {\n      '2012-05-22': [{\n        name: 'item 1 - any js object'\n      }],\n      '2012-05-23': [{\n        name: 'item 2 - any js object',\n        height: 80\n      }],\n      '2012-05-24': [],\n      '2012-05-25': [{\n        name: 'item 3 - any js object'\n      }, {\n        name: 'any js object'\n      }]\n    },\n    loadItemsForMonth: function loadItemsForMonth(month) {\n      console.log('trigger items loading');\n    },\n    onCalendarToggled: function onCalendarToggled(calendarOpened) {\n      console.log(calendarOpened);\n    },\n    onDayPress: function onDayPress(day) {\n      console.log('day pressed');\n    },\n    onDayChange: function onDayChange(day) {\n      console.log('day changed');\n    },\n    minDate: '2012-05-10',\n    maxDate: '2022-12-31',\n    pastScrollRange: 100,\n    futureScrollRange: 100,\n    renderItem: function renderItem(item, firstItemInDay) {\n      return _react.default.createElement(_reactNative.View, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 53\n        }\n      });\n    },\n    renderDay: function renderDay(day, item) {\n      return _react.default.createElement(_reactNative.View, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 41\n        }\n      });\n    },\n    renderEmptyDate: function renderEmptyDate() {\n      return _react.default.createElement(_reactNative.View, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 38\n        }\n      });\n    },\n    renderKnob: function renderKnob() {\n      return _react.default.createElement(_reactNative.View, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 33\n        }\n      });\n    },\n    renderEmptyData: function renderEmptyData() {\n      return _react.default.createElement(_reactNative.View, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 40\n        }\n      });\n    },\n    rowHasChanged: function rowHasChanged(r1, r2) {\n      return r1.text !== r2.text;\n    },\n    hideKnob: false,\n    showClosingKnob: false,\n    onRefresh: function onRefresh() {\n      return console.log('refreshing...');\n    },\n    refreshing: false,\n    refreshControl: null,\n    theme: (0, _extends2.default)({}, _reactNativeCalendars.calendarTheme, {\n      agendaDayTextColor: 'yellow',\n      agendaDayNumColor: 'green',\n      agendaTodayColor: 'red',\n      agendaKnobColor: 'blue'\n    }),\n    style: {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 4\n    }\n  });\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  calendar: {\n    borderBottomWidth: 1,\n    borderBottomColor: '#e0e0e0'\n  }\n});\n\nvar _default = CalendarView;\nexports.default = _default;","map":{"version":3,"sources":["D:/merge/please-attendence/src/components/calendar/CalendarView.js"],"names":["CalendarView","markedDate","selected","name","height","month","console","log","calendarOpened","day","item","firstItemInDay","r1","r2","text","calendarTheme","agendaDayTextColor","agendaDayNumColor","agendaTodayColor","agendaKnobColor","styles","StyleSheet","create","calendar","borderBottomWidth","borderBottomColor"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Agenda, calendarTheme} from 'react-native-calendars';\r\nimport {StyleSheet, View} from 'react-native';\r\n\r\nfunction CalendarView() {\r\n  const markedDate = {\r\n        '2017-12-03' : {\r\n            selected: true,\r\n        },\r\n    };\r\n\r\n  return (\r\n   <Agenda \r\n     markedDates={markedDate}\r\n     items={{\r\n      '2012-05-22': [{name: 'item 1 - any js object'}],\r\n      '2012-05-23': [{name: 'item 2 - any js object', height: 80}],\r\n      '2012-05-24': [],\r\n      '2012-05-25': [{name: 'item 3 - any js object'}, {name: 'any js object'}]\r\n     }}\r\n      // Callback that gets called when items for a certain month should be loaded (month became visible)\r\n     loadItemsForMonth={(month) => {console.log('trigger items loading')}}\r\n      // Callback that fires when the calendar is opened or closed\r\n     onCalendarToggled={(calendarOpened) => {console.log(calendarOpened)}}\r\n     // Callback that gets called on day press\r\n     onDayPress={(day) => {console.log('day pressed')}}\r\n     // Callback that gets called when day changes while scrolling agenda list\r\n     onDayChange={(day) => {console.log('day changed')}}\r\n     // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\r\n     minDate={'2012-05-10'}\r\n     // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\r\n     maxDate={'2022-12-31'}\r\n      // Max amount of months allowed to scroll to the past. Default = 50\r\n     pastScrollRange={100}\r\n     // Max amount of months allowed to scroll to the future. Default = 50\r\n     futureScrollRange={100}\r\n     // Specify how each item should be rendered in agenda\r\n     renderItem={(item, firstItemInDay) => {return (<View />);}}\r\n     // Specify how each date should be rendered. day can be undefined if the item is not first in that day\r\n     renderDay={(day, item) => {return (<View />);}}\r\n     // Specify how empty date content with no items should be rendered\r\n     renderEmptyDate={() => {return (<View />);}}\r\n     // Specify how agenda knob should look like\r\n     renderKnob={() => {return (<View />);}}\r\n     // Specify what should be rendered instead of ActivityIndicator\r\n     renderEmptyData = {() => {return (<View />);}}\r\n     // Specify your item comparison function for increased performance\r\n     rowHasChanged={(r1, r2) => {return r1.text !== r2.text}}\r\n     // Hide knob button. Default = false\r\n     hideKnob={false}\r\n     // When `true` and `hideKnob` prop is `false`, the knob will always be visible and the user will be able to drag the knob up and close the calendar. Default = false\r\n     showClosingKnob={false}\r\n     // If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make sure to also set the refreshing prop correctly\r\n     onRefresh={() => console.log('refreshing...')}\r\n      // Set this true while waiting for new data from a refresh\r\n     refreshing={false}\r\n     // Add a custom RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView\r\n     refreshControl={null}\r\n     // Agenda theme\r\n     theme={{\r\n      ...calendarTheme,\r\n      agendaDayTextColor: 'yellow',\r\n      agendaDayNumColor: 'green',\r\n      agendaTodayColor: 'red',\r\n      agendaKnobColor: 'blue'\r\n     }}\r\n     // Agenda container style\r\n     style={{}}\r\n\r\n   />\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  calendar: {\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: '#e0e0e0',\r\n  },\r\n});\r\n\r\nexport default CalendarView;\r\n"]},"metadata":{},"sourceType":"script"}