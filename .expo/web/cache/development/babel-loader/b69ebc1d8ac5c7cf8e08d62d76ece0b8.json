{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNativeCalendars = require(\"react-native-calendars\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _jsxFileName = \"D:\\\\merge\\\\please-attendence\\\\src\\\\navigation\\\\pages\\\\Calendar.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n_reactNativeCalendars.LocaleConfig.locales['fr'] = {\n  monthNames: ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'],\n  monthNamesShort: ['Janv.', 'Févr.', 'Mars', 'Avril', 'Mai', 'Juin', 'Juil.', 'Août', 'Sept.', 'Oct.', 'Nov.', 'Déc.'],\n  dayNames: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'],\n  dayNamesShort: ['SUN', 'MON', 'THU', 'WED', 'TUR', 'FRI', 'SAT'],\n  today: 'Aujourd\\'hui'\n};\n_reactNativeCalendars.LocaleConfig.defaultLocale = 'fr';\n\nvar Calendars = function (_Component) {\n  (0, _inherits2.default)(Calendars, _Component);\n\n  var _super = _createSuper(Calendars);\n\n  function Calendars() {\n    (0, _classCallCheck2.default)(this, Calendars);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(Calendars, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return _react.default.createElement(_reactNative.View, {\n        style: {\n          paddingTop: 50,\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }\n      }, _react.default.createElement(_reactNativeCalendars.Agenda, {\n        items: {\n          '2012-05-22': [{\n            name: 'item 1 - any js object'\n          }],\n          '2012-05-23': [{\n            name: 'item 2 - any js object',\n            height: 80\n          }],\n          '2012-05-24': [],\n          '2012-05-25': [{\n            name: 'item 3 - any js object'\n          }, {\n            name: 'any js object'\n          }]\n        },\n        loadItemsForMonth: function loadItemsForMonth(month) {\n          console.log('trigger items loading');\n        },\n        onCalendarToggled: function onCalendarToggled(calendarOpened) {\n          console.log(calendarOpened);\n        },\n        onDayPress: function onDayPress(day) {\n          console.log('day pressed');\n        },\n        onDayChange: function onDayChange(day) {\n          console.log('day changed');\n        },\n        selected: '2012-05-16',\n        minDate: '2012-05-10',\n        maxDate: '2012-05-30',\n        pastScrollRange: 50,\n        futureScrollRange: 50,\n        renderItem: function renderItem(item, firstItemInDay) {\n          return _react.default.createElement(_reactNative.View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 50\n            }\n          });\n        },\n        renderDay: function renderDay(day, item) {\n          return _react.default.createElement(_reactNative.View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 38\n            }\n          });\n        },\n        renderEmptyDate: function renderEmptyDate() {\n          return _react.default.createElement(_reactNative.View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 35\n            }\n          });\n        },\n        renderKnob: function renderKnob() {\n          return _react.default.createElement(_reactNative.View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 30\n            }\n          });\n        },\n        renderEmptyData: function renderEmptyData() {\n          return _react.default.createElement(_reactNative.View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 37\n            }\n          });\n        },\n        rowHasChanged: function rowHasChanged(r1, r2) {\n          return r1.text !== r2.text;\n        },\n        hideKnob: true,\n        showClosingKnob: false,\n        markedDates: {\n          '2012-05-16': {\n            selected: true,\n            marked: true\n          },\n          '2012-05-17': {\n            marked: true\n          },\n          '2012-05-18': {\n            disabled: true\n          }\n        },\n        disabledByDefault: true,\n        onRefresh: function onRefresh() {\n          return console.log('refreshing...');\n        },\n        refreshing: false,\n        refreshControl: null,\n        theme: (0, _extends2.default)({}, calendarTheme, {\n          agendaDayTextColor: 'yellow',\n          agendaDayNumColor: 'green',\n          agendaTodayColor: 'red',\n          agendaKnobColor: 'blue'\n        }),\n        style: {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n  return Calendars;\n}(_react.Component);\n\nvar _default = Calendars;\nexports.default = _default;","map":{"version":3,"sources":["D:/merge/please-attendence/src/navigation/pages/Calendar.js"],"names":["LocaleConfig","locales","monthNames","monthNamesShort","dayNames","dayNamesShort","today","defaultLocale","Calendars","paddingTop","flex","name","height","month","console","log","calendarOpened","day","item","firstItemInDay","r1","r2","text","selected","marked","disabled","calendarTheme","agendaDayTextColor","agendaDayNumColor","agendaTodayColor","agendaKnobColor","Component"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAEA;;;;;;;;;;;;AAGAA,mCAAaC,OAAb,CAAqB,IAArB,IAA6B;AACzBC,EAAAA,UAAU,EAAE,CAAC,SAAD,EAAW,SAAX,EAAqB,MAArB,EAA4B,OAA5B,EAAoC,KAApC,EAA0C,MAA1C,EAAiD,SAAjD,EAA2D,MAA3D,EAAkE,WAAlE,EAA8E,SAA9E,EAAwF,UAAxF,EAAmG,UAAnG,CADa;AAEzBC,EAAAA,eAAe,EAAE,CAAC,OAAD,EAAS,OAAT,EAAiB,MAAjB,EAAwB,OAAxB,EAAgC,KAAhC,EAAsC,MAAtC,EAA6C,OAA7C,EAAqD,MAArD,EAA4D,OAA5D,EAAoE,MAApE,EAA2E,MAA3E,EAAkF,MAAlF,CAFQ;AAGzBC,EAAAA,QAAQ,EAAE,CAAC,KAAD,EAAO,KAAP,EAAc,KAAd,EAAoB,KAApB,EAA0B,KAA1B,EAAgC,KAAhC,EAAsC,KAAtC,CAHe;AAIzBC,EAAAA,aAAa,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAc,KAAd,EAAoB,KAApB,EAA0B,KAA1B,EAAgC,KAAhC,EAAsC,KAAtC,CAJU;AAKzBC,EAAAA,KAAK,EAAE;AALkB,CAA7B;AAOEN,mCAAaO,aAAb,GAA6B,IAA7B;;IAKIC,S;;;;;;;;;;;;WACF,kBAAQ;AAAA;;AACJ,aACI,6BAAC,iBAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAE,EAAd;AAAkBC,UAAAA,IAAI,EAAE;AAAxB,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,6BAAC,4BAAD;AAIV,QAAA,KAAK,EAAE;AACL,wBAAc,CAAC;AAACC,YAAAA,IAAI,EAAE;AAAP,WAAD,CADT;AAEL,wBAAc,CAAC;AAACA,YAAAA,IAAI,EAAE,wBAAP;AAAiCC,YAAAA,MAAM,EAAE;AAAzC,WAAD,CAFT;AAGL,wBAAc,EAHT;AAIL,wBAAc,CAAC;AAACD,YAAAA,IAAI,EAAE;AAAP,WAAD,EAAmC;AAACA,YAAAA,IAAI,EAAE;AAAP,WAAnC;AAJT,SAJG;AAWV,QAAA,iBAAiB,EAAE,2BAACE,KAAD,EAAW;AAACC,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAAqC,SAX1D;AAaV,QAAA,iBAAiB,EAAE,2BAACC,cAAD,EAAoB;AAACF,UAAAA,OAAO,CAACC,GAAR,CAAYC,cAAZ;AAA4B,SAb1D;AAeV,QAAA,UAAU,EAAE,oBAACC,GAAD,EAAS;AAACH,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAA2B,SAfvC;AAiBV,QAAA,WAAW,EAAE,qBAACE,GAAD,EAAS;AAACH,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAA2B,SAjBxC;AAmBV,QAAA,QAAQ,EAAE,YAnBA;AAqBV,QAAA,OAAO,EAAE,YArBC;AAuBV,QAAA,OAAO,EAAE,YAvBC;AAyBV,QAAA,eAAe,EAAE,EAzBP;AA2BV,QAAA,iBAAiB,EAAE,EA3BT;AA6BV,QAAA,UAAU,EAAE,oBAACG,IAAD,EAAOC,cAAP,EAA0B;AAAC,iBAAQ,6BAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AAAmB,SA7BhD;AA+BV,QAAA,SAAS,EAAE,mBAACF,GAAD,EAAMC,IAAN,EAAe;AAAC,iBAAQ,6BAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AAAmB,SA/BpC;AAiCV,QAAA,eAAe,EAAE,2BAAM;AAAC,iBAAQ,6BAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AAAmB,SAjCjC;AAmCV,QAAA,UAAU,EAAE,sBAAM;AAAC,iBAAQ,6BAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AAAmB,SAnC5B;AAqCV,QAAA,eAAe,EAAI,2BAAM;AAAC,iBAAQ,6BAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AAAmB,SArCnC;AAuCV,QAAA,aAAa,EAAE,uBAACE,EAAD,EAAKC,EAAL,EAAY;AAAC,iBAAOD,EAAE,CAACE,IAAH,KAAYD,EAAE,CAACC,IAAtB;AAA2B,SAvC7C;AAyCV,QAAA,QAAQ,EAAE,IAzCA;AA2CV,QAAA,eAAe,EAAE,KA3CP;AA6CV,QAAA,WAAW,EAAE;AACX,wBAAc;AAACC,YAAAA,QAAQ,EAAE,IAAX;AAAiBC,YAAAA,MAAM,EAAE;AAAzB,WADH;AAEX,wBAAc;AAACA,YAAAA,MAAM,EAAE;AAAT,WAFH;AAGX,wBAAc;AAACC,YAAAA,QAAQ,EAAE;AAAX;AAHH,SA7CH;AAmDV,QAAA,iBAAiB,EAAE,IAnDT;AAqDV,QAAA,SAAS,EAAE;AAAA,iBAAMX,OAAO,CAACC,GAAR,CAAY,eAAZ,CAAN;AAAA,SArDD;AAuDV,QAAA,UAAU,EAAE,KAvDF;AAyDV,QAAA,cAAc,EAAE,IAzDN;AA2DV,QAAA,KAAK,6BACAW,aADA;AAEHC,UAAAA,kBAAkB,EAAE,QAFjB;AAGHC,UAAAA,iBAAiB,EAAE,OAHhB;AAIHC,UAAAA,gBAAgB,EAAE,KAJf;AAKHC,UAAAA,eAAe,EAAE;AALd,UA3DK;AAmEV,QAAA,KAAK,EAAE,EAnEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CADJ;AA0EH;;;EA5EmBC,gB;;eA+ETvB,S","sourcesContent":["import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport { Calendar, CalendarList, Agenda } from \"react-native-calendars\";\r\nimport {LocaleConfig} from 'react-native-calendars';\r\nimport { View, ToastAndroid } from \"react-native\";\r\n\r\n\r\nLocaleConfig.locales['fr'] = {\r\n    monthNames: ['Janvier','Février','Mars','Avril','Mai','Juin','Juillet','Août','Septembre','Octobre','Novembre','Décembre'],\r\n    monthNamesShort: ['Janv.','Févr.','Mars','Avril','Mai','Juin','Juil.','Août','Sept.','Oct.','Nov.','Déc.'],\r\n    dayNames: ['일요일','월요일', '화요일','수요일','목요일','금요일','토요일'],\r\n    dayNamesShort: ['SUN', 'MON','THU','WED','TUR','FRI','SAT'],\r\n    today: 'Aujourd\\'hui'\r\n  };\r\n  LocaleConfig.defaultLocale = 'fr';\r\n\r\n \r\n\r\n\r\nclass Calendars extends Component{\r\n    render(){\r\n        return(\r\n            <View style={{ paddingTop: 50, flex: 1 }}>\r\n            <Agenda\r\n  // The list of items that have to be displayed in agenda. If you want to render item as empty date\r\n  // the value of date key has to be an empty array []. If there exists no value for date key it is\r\n  // considered that the date in question is not yet loaded\r\n  items={{\r\n    '2012-05-22': [{name: 'item 1 - any js object'}],\r\n    '2012-05-23': [{name: 'item 2 - any js object', height: 80}],\r\n    '2012-05-24': [],\r\n    '2012-05-25': [{name: 'item 3 - any js object'}, {name: 'any js object'}]\r\n  }}\r\n  // Callback that gets called when items for a certain month should be loaded (month became visible)\r\n  loadItemsForMonth={(month) => {console.log('trigger items loading')}}\r\n  // Callback that fires when the calendar is opened or closed\r\n  onCalendarToggled={(calendarOpened) => {console.log(calendarOpened)}}\r\n  // Callback that gets called on day press\r\n  onDayPress={(day) => {console.log('day pressed')}}\r\n  // Callback that gets called when day changes while scrolling agenda list\r\n  onDayChange={(day) => {console.log('day changed')}}\r\n  // Initially selected day\r\n  selected={'2012-05-16'}\r\n  // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\r\n  minDate={'2012-05-10'}\r\n  // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\r\n  maxDate={'2012-05-30'}\r\n  // Max amount of months allowed to scroll to the past. Default = 50\r\n  pastScrollRange={50}\r\n  // Max amount of months allowed to scroll to the future. Default = 50\r\n  futureScrollRange={50}\r\n  // Specify how each item should be rendered in agenda\r\n  renderItem={(item, firstItemInDay) => {return (<View />);}}\r\n  // Specify how each date should be rendered. day can be undefined if the item is not first in that day\r\n  renderDay={(day, item) => {return (<View />);}}\r\n  // Specify how empty date content with no items should be rendered\r\n  renderEmptyDate={() => {return (<View />);}}\r\n  // Specify how agenda knob should look like\r\n  renderKnob={() => {return (<View />);}}\r\n  // Specify what should be rendered instead of ActivityIndicator\r\n  renderEmptyData = {() => {return (<View />);}}\r\n  // Specify your item comparison function for increased performance\r\n  rowHasChanged={(r1, r2) => {return r1.text !== r2.text}}\r\n  // Hide knob button. Default = false\r\n  hideKnob={true}\r\n  // When `true` and `hideKnob` prop is `false`, the knob will always be visible and the user will be able to drag the knob up and close the calendar. Default = false\r\n  showClosingKnob={false}\r\n  // By default, agenda dates are marked if they have at least one item, but you can override this if needed\r\n  markedDates={{\r\n    '2012-05-16': {selected: true, marked: true},\r\n    '2012-05-17': {marked: true},\r\n    '2012-05-18': {disabled: true}\r\n  }}\r\n  // If disabledByDefault={true} dates flagged as not disabled will be enabled. Default = false\r\n  disabledByDefault={true}\r\n  // If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make sure to also set the refreshing prop correctly\r\n  onRefresh={() => console.log('refreshing...')}\r\n  // Set this true while waiting for new data from a refresh\r\n  refreshing={false}\r\n  // Add a custom RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView\r\n  refreshControl={null}\r\n  // Agenda theme\r\n  theme={{\r\n    ...calendarTheme,\r\n    agendaDayTextColor: 'yellow',\r\n    agendaDayNumColor: 'green',\r\n    agendaTodayColor: 'red',\r\n    agendaKnobColor: 'blue'\r\n  }}\r\n  // Agenda container style\r\n  style={{}}\r\n/>\r\n\r\n          </View>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calendars;"]},"metadata":{},"sourceType":"script"}