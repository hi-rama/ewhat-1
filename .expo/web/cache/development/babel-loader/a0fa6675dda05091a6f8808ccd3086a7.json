{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nrequire(\"react-native-gesture-handler\");\n\nvar _theme = require(\"../../components/theme\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _IconButton = _interopRequireDefault(require(\"../../components/Main/IconButton\"));\n\nvar _reactNativeElements = require(\"react-native-elements\");\n\nvar _image = require(\"../../components/Main/image\");\n\nvar _Inputs = _interopRequireDefault(require(\"../../components/SubjectInput/Inputs\"));\n\nvar _Task = _interopRequireDefault(require(\"../../components/SubjectInput/Task\"));\n\nvar _expoAppLoading = _interopRequireDefault(require(\"expo-app-loading\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _SubjectInsert = _interopRequireDefault(require(\"../../components/SubjectInput/SubjectInsert\"));\n\nvar _SubjectList = _interopRequireDefault(require(\"../../components/SubjectInput/SubjectList\"));\n\nvar _SubjectListItem = _interopRequireDefault(require(\"../../components/SubjectInput/SubjectListItem\"));\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\folder\\\\please-attendence\\\\src\\\\navigation\\\\pages\\\\InputSubject.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar InputSubject = function InputSubject() {\n  return _react.default.createElement(_reactNative.View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    style: styles.pageTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, \"Lecture List\"), _react.default.createElement(_reactNative.View, {\n    style: styles.card,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_SubjectInsert.default, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }), _react.default.createElement(_SubjectList.default, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  })));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: _theme.theme.color3\n  },\n  pageTitle: {\n    color: _theme.theme.color1,\n    fontSize: 36,\n    fontWeight: '800',\n    marginTop: 30,\n    marginBottom: 10,\n    fontWeight: '300',\n    textAlign: 'center',\n    backgroundColor: _theme.theme.color3\n  },\n  card: {\n    backgroundColor: _theme.theme.color5,\n    flex: 1,\n    borderTopLeftRadius: 10,\n    borderTopRightRadius: 10,\n    marginLeft: 10,\n    marginRight: 10\n  },\n  input: {\n    padding: 20,\n    borderBottomColor: '#bbb',\n    borderBottomWidth: 1,\n    fontSize: 24,\n    marginLeft: 20\n  }\n});\n\nvar _default = InputSubject;\nexports.default = _default;","map":{"version":3,"sources":["D:/folder/please-attendence/src/navigation/pages/InputSubject.js"],"names":["InputSubject","styles","container","pageTitle","card","StyleSheet","create","flex","backgroundColor","theme","color3","color","color1","fontSize","fontWeight","marginTop","marginBottom","textAlign","color5","borderTopLeftRadius","borderTopRightRadius","marginLeft","marginRight","input","padding","borderBottomColor","borderBottomWidth"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;AAEA,IAAMA,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,SACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAIC,MAAM,CAACC,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAID,MAAM,CAACE,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAIF,MAAM,CAACG,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,6BAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,6BAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFF,CADF;AASD,CAVD;;AAYA,IAAMH,MAAM,GAAGI,wBAAWC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAEC,aAAMC;AAFd,GADoB;AAK/BP,EAAAA,SAAS,EAAC;AACRQ,IAAAA,KAAK,EAAEF,aAAMG,MADL;AAERC,IAAAA,QAAQ,EAAE,EAFF;AAGRC,IAAAA,UAAU,EAAE,KAHJ;AAIRC,IAAAA,SAAS,EAAE,EAJH;AAKRC,IAAAA,YAAY,EAAE,EALN;AAMRF,IAAAA,UAAU,EAAE,KANJ;AAORG,IAAAA,SAAS,EAAE,QAPH;AAQRT,IAAAA,eAAe,EAAEC,aAAMC;AARf,GALqB;AAe/BN,EAAAA,IAAI,EAAE;AACJI,IAAAA,eAAe,EAAEC,aAAMS,MADnB;AAEJX,IAAAA,IAAI,EAAE,CAFF;AAGJY,IAAAA,mBAAmB,EAAE,EAHjB;AAIJC,IAAAA,oBAAoB,EAAE,EAJlB;AAKJC,IAAAA,UAAU,EAAE,EALR;AAMJC,IAAAA,WAAW,EAAE;AANT,GAfyB;AAuB/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,OAAO,EAAE,EADJ;AAELC,IAAAA,iBAAiB,EAAE,MAFd;AAGLC,IAAAA,iBAAiB,EAAE,CAHd;AAILb,IAAAA,QAAQ,EAAE,EAJL;AAKLQ,IAAAA,UAAU,EAAE;AALP;AAvBwB,CAAlB,CAAf;;eAsIerB,Y","sourcesContent":["import React from \"react\";\r\nimport 'react-native-gesture-handler';\r\nimport { theme } from \"../../components/theme\";\r\nimport PropsTypes from 'prop-types'\r\nimport { useState } from \"react\";\r\nimport IconButton from \"../../components/Main/IconButton\";\r\nimport { Icon } from \"react-native-elements\";\r\nimport { images } from \"../../components/Main/image\";\r\nimport Inputs from \"../../components/SubjectInput/Inputs\";\r\nimport SubjectTask from \"../../components/SubjectInput/Task\";\r\nimport AppLoading from \"expo-app-loading\";\r\nimport { AsyncStorage } from \"react-native\";\r\nimport { View,  StyleSheet, Dimensions, StatusBar, Text, TextInput, ScrollView} from \"react-native\";\r\nimport SubjectInsert from '../../components/SubjectInput/SubjectInsert';\r\nimport SubjectList from '../../components/SubjectInput/SubjectList';\r\nimport SubjectListItem from \"../../components/SubjectInput/SubjectListItem\";\r\n\r\nconst InputSubject = () => {\r\n  return(\r\n    <View style = {styles.container}>\r\n      <Text style = {styles.pageTitle}>Lecture List</Text>\r\n      <View style = {styles.card}>\r\n        <SubjectInsert />\r\n        <SubjectList />\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: theme.color3,\r\n  },\r\n  pageTitle:{\r\n    color: theme.color1,\r\n    fontSize: 36,\r\n    fontWeight: '800',\r\n    marginTop: 30,\r\n    marginBottom: 10,\r\n    fontWeight: '300',\r\n    textAlign: 'center',\r\n    backgroundColor: theme.color3,\r\n  },\r\n  card: {\r\n    backgroundColor: theme.color5,\r\n    flex: 1,\r\n    borderTopLeftRadius: 10, // to provide rounded corners\r\n    borderTopRightRadius: 10, // to provide rounded corners\r\n    marginLeft: 10,\r\n    marginRight: 10,\r\n  },\r\n  input: {\r\n    padding: 20,\r\n    borderBottomColor: '#bbb',\r\n    borderBottomWidth: 1,\r\n    fontSize: 24,\r\n    marginLeft: 20,\r\n  },\r\n});\r\n\r\n\r\n\r\n/*\r\nconst List = styled.ScrollView`\r\n    flex: 1;\r\n    width: ${({width}) => width - 40}px;`\r\n\r\n\r\nconst InputSubject = ({navigation}) => {\r\n    const [isReady, setIsReady] = useState(false);\r\n    const [newTask, setNewTask] = useState('');\r\n    const [tasks, setTasks] = useState({});\r\n\r\n    const width = Dimensions.get('window').width;\r\n\r\n    const _saveTasks = async tasks => {\r\n        try {\r\n          await AsyncStorage.setItem('tasks', JSON.stringify(tasks));\r\n          setTasks(tasks);\r\n        } catch (e) {\r\n          console.error(e);\r\n        }\r\n      };\r\n      const _loadTasks = async () => {\r\n        const loadedTasks = await AsyncStorage.getItem('tasks');\r\n        setTasks(JSON.parse(loadedTasks || '{}'));\r\n      };\r\n    \r\n      const _addTask = () => {\r\n        const ID = Date.now().toString();\r\n        const newTaskObject = {\r\n          [ID]: { id: ID, text: newTask, completed: false },\r\n        };\r\n        setNewTask('');\r\n        _saveTasks({ ...tasks, ...newTaskObject });\r\n      };\r\n      const _deleteTask = id => {\r\n        const currentTasks = Object.assign({}, tasks);\r\n        delete currentTasks[id];\r\n        _saveTasks(currentTasks);\r\n      };\r\n      const _toggleTask = id => {\r\n        const currentTasks = Object.assign({}, tasks);\r\n        currentTasks[id]['completed'] = !currentTasks[id]['completed'];\r\n        _saveTasks(currentTasks);\r\n      };\r\n      const _updateTask = item => {\r\n        const currentTasks = Object.assign({}, tasks);\r\n        currentTasks[item.id] = item;\r\n        _saveTasks(currentTasks);\r\n      };\r\n    \r\n      const _handleTextChange = text => {\r\n        setNewTask(text);\r\n      };\r\n      const _onBlur = () => {\r\n        setNewTask('');\r\n      };\r\n    return isReady ? (\r\n        <View>\r\n                <StatusBar \r\n                    barStyle='light-content'     \r\n                />\r\n                <Title>Input lectures</Title>\r\n                <Inputs \r\n                    placeholder = \"+ Add subjects\"\r\n                    value = {newTask}\r\n                    onChangeTest = {_handleTextChange}\r\n                    onSubmitEditing = {_addTask}\r\n                    onBlur = {_onBlur}/>\r\n                <List width = {width}>\r\n                    {Object.values(tasks).reverse().map(item => (\r\n                        <SubjectTask \r\n                        key={item.id}\r\n                        item={item}\r\n                        deleteTask={_deleteTask}\r\n                        toggleTask={_toggleTask}\r\n                        updateTask={_updateTask} />\r\n                    ))}\r\n                </List>\r\n            </View>\r\n    ) : (\r\n        <AppLoading \r\n        startAsync={_loadTasks}\r\n        onFinish={() => setIsReady(true)}\r\n        onError={console.error} />\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\nconst Title = styled.Text`\r\n    font-size: 40px;\r\n    font-weight: 600;\r\n    color: #63855d;\r\n    align-self: flex-start;\r\n    margin: 20px;`\r\n\r\n\r\n*/\r\n\r\nexport default InputSubject;\r\n\r\n/*\r\n           <Button \r\n            title = \"move to calandar\"\r\n            onPress = {() => navigation.navigate('FirstSetting')} />\r\n\r\n            */\r\n"]},"metadata":{},"sourceType":"script"}