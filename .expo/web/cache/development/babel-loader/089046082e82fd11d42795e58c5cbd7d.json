{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNativeCalendars = require(\"react-native-calendars\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _jsxFileName = \"D:\\\\merge\\\\please-attendence\\\\src\\\\navigation\\\\pages\\\\Calendar.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n_reactNativeCalendars.LocaleConfig.locales['fr'] = {\n  monthNames: ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'],\n  monthNamesShort: ['Janv.', 'Févr.', 'Mars', 'Avril', 'Mai', 'Juin', 'Juil.', 'Août', 'Sept.', 'Oct.', 'Nov.', 'Déc.'],\n  dayNames: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'],\n  dayNamesShort: ['SUN', 'MON', 'THU', 'WED', 'TUR', 'FRI', 'SAT'],\n  today: 'Aujourd\\'hui'\n};\n_reactNativeCalendars.LocaleConfig.defaultLocale = 'fr';\n\nvar _React$useState = _react.default.useState(null),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    markedDates = _React$useState2[0],\n    setMarkedDates = _React$useState2[1];\n\nvar _React$useState3 = _react.default.useState(['2021-01-05', '2021-01-20']),\n    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n    dates = _React$useState4[0],\n    setDates = _React$useState4[1];\n\nfunction addDates() {\n  var obj = dates.reduce(function (c, v) {\n    return (0, _extends3.default)(c, (0, _defineProperty2.default)({}, v, {\n      marked: true,\n      dotColor: 'red'\n    }));\n  }, {});\n}\n\nvar Calendars = function (_Component) {\n  (0, _inherits2.default)(Calendars, _Component);\n\n  var _super = _createSuper(Calendars);\n\n  function Calendars() {\n    (0, _classCallCheck2.default)(this, Calendars);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(Calendars, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return _react.default.createElement(_reactNative.View, {\n        style: {\n          paddingTop: 50,\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }\n      }, _react.default.createElement(_reactNativeCalendars.Calendar, {\n        current: '2021-12-15',\n        minDate: '2020-01-01',\n        maxDate: '2022-07-31',\n        onDayPress: function onDayPress(day) {\n          console.log('selected day', day);\n          addDates();\n        },\n        onDayLongPress: function onDayLongPress(day) {\n          console.log('selected day', day);\n        },\n        monthFormat: 'yyyy MM',\n        onMonthChange: function onMonthChange(month) {\n          console.log('month changed', month);\n        },\n        hideArrows: true,\n        renderArrow: function renderArrow(direction) {\n          return _react.default.createElement(Arrow, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 42\n            }\n          });\n        },\n        hideExtraDays: true,\n        disableMonthChange: true,\n        firstDay: 1,\n        hideDayNames: false,\n        showWeekNumbers: false,\n        onPressArrowLeft: function onPressArrowLeft(substractMonth) {\n          return substractMonth();\n        },\n        onPressArrowRight: function onPressArrowRight(addMonth) {\n          return addMonth();\n        },\n        disableArrowLeft: true,\n        disableArrowRight: true,\n        disableAllTouchEventsForDisabledDays: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n  return Calendars;\n}(_react.Component);\n\nvar _default = Calendars;\nexports.default = _default;","map":{"version":3,"sources":["D:/merge/please-attendence/src/navigation/pages/Calendar.js"],"names":["LocaleConfig","locales","monthNames","monthNamesShort","dayNames","dayNamesShort","today","defaultLocale","React","useState","markedDates","setMarkedDates","dates","setDates","addDates","obj","reduce","c","v","marked","dotColor","Calendars","paddingTop","flex","day","console","log","month","direction","substractMonth","addMonth","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport { Calendar, CalendarList, Agenda } from \"react-native-calendars\";\r\nimport {LocaleConfig} from 'react-native-calendars';\r\nimport { View, ToastAndroid } from \"react-native\";\r\n\r\n\r\nLocaleConfig.locales['fr'] = {\r\n    monthNames: ['Janvier','Février','Mars','Avril','Mai','Juin','Juillet','Août','Septembre','Octobre','Novembre','Décembre'],\r\n    monthNamesShort: ['Janv.','Févr.','Mars','Avril','Mai','Juin','Juil.','Août','Sept.','Oct.','Nov.','Déc.'],\r\n    dayNames: ['일요일','월요일', '화요일','수요일','목요일','금요일','토요일'],\r\n    dayNamesShort: ['SUN', 'MON','THU','WED','TUR','FRI','SAT'],\r\n    today: 'Aujourd\\'hui'\r\n  };\r\n  LocaleConfig.defaultLocale = 'fr';\r\n\r\n  const [markedDates, setMarkedDates] = React.useState(null);\r\n  const [dates, setDates] = React.useState(['2021-01-05', '2021-01-20']);\r\n\r\n function addDates() {\r\n    let obj = dates.reduce(\r\n      (c, v) => Object.assign(c, {\r\n        [v]: {marked: true, dotColor: 'red'},\r\n      }),\r\n      {},\r\n    );\r\n  }\r\n\r\n\r\nclass Calendars extends Component{\r\n    render(){\r\n        return(\r\n            <View style={{ paddingTop: 50, flex: 1 }}>\r\n            <Calendar\r\n            // Initially visible month. Default = Date()\r\n            current={'2021-12-15'}\r\n            // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\r\n            minDate={'2020-01-01'}\r\n            // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\r\n            maxDate={'2022-07-31'}\r\n            // Handler which gets executed on day press. Default = undefined\r\n            onDayPress={(day) => {\r\n              console.log('selected day', day)\r\n              addDates();\r\n              \r\n            }}\r\n            // Handler which gets executed on day long press. Default = undefined\r\n            onDayLongPress={(day) => {console.log('selected day', day)}}\r\n            // Month format in calendar title. Formatting values: http://arshaw.com/xdate/#Formatting\r\n            monthFormat={'yyyy MM'}\r\n            // Handler which gets executed when visible month changes in calendar. Default = undefined\r\n            onMonthChange={(month) => {console.log('month changed', month)}}\r\n            // Hide month navigation arrows. Default = false\r\n            hideArrows={true}\r\n            // Replace default arrows with custom ones (direction can be 'left' or 'right')\r\n            renderArrow={(direction) => (<Arrow/>)}\r\n            // Do not show days of other months in month page. Default = false\r\n            hideExtraDays={true}\r\n            // If hideArrows=false and hideExtraDays=false do not switch month when tapping on greyed out\r\n            // day from another month that is visible in calendar page. Default = false\r\n            disableMonthChange={true}\r\n            // If firstDay=1 week starts from Monday. Note that dayNames and dayNamesShort should still start from Sunday.\r\n            firstDay={1}\r\n            // Hide day names. Default = false\r\n            hideDayNames={false}\r\n            // Show week numbers to the left. Default = false\r\n            showWeekNumbers={false}\r\n            // Handler which gets executed when press arrow icon left. It receive a callback can go back month\r\n            onPressArrowLeft={substractMonth => substractMonth()}\r\n            // Handler which gets executed when press arrow icon right. It receive a callback can go next month\r\n            onPressArrowRight={addMonth => addMonth()}\r\n            // Disable left arrow. Default = false\r\n            disableArrowLeft={true}\r\n            // Disable right arrow. Default = false\r\n            disableArrowRight={true}\r\n            // Disable all touch events for disabled days. can be override with disableTouchEvent in markedDates\r\n            disableAllTouchEventsForDisabledDays={true}\r\n            /** Replace default month and year title with custom one. the function receive a date as parameter. */\r\n            //renderHeader={(date) => {/*Return JSX*/}}\r\n            />\r\n          </View>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calendars;"]},"metadata":{},"sourceType":"script"}